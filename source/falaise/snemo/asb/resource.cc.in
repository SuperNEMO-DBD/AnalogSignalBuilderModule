// snemo/asb/resource.cc - Implementation of ASB Falaise plugin resource
//
// Copyright (c) 2018 by F. Mauger <mauger@lpccaen.in2p3.fr>
//
// This file is part of ASB Falaise plugin.
//
// ASB Falaise plugin is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// ASB Falaise plugin is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with ASB Falaise plugin.  If not, see <http://www.gnu.org/licenses/>.

// Ourselves
#include <snemo/asb/resource.h>
#include "snemo/asb/flasb_binreloc.h"

// Standard Library
#include <iostream>
#include <fstream>
#include <cstdlib>

// Mute some specific warnings in Boost <=1.55:
#if defined (__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wshadow"
#endif
#if defined (__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wshadow"
// 2016-03-15 XG: from http://stackoverflow.com/questions/1814548/boostsystem-category-defined-but-not-used
#define BOOST_SYSTEM_NO_DEPRECATED 1
#endif

#include <boost/filesystem.hpp>

#if defined (__GNUC__)
#pragma GCC diagnostic pop
#undef BOOST_SYSTEM_NO_DEPRECATED
#endif
#if defined (__clang__)
#pragma clang diagnostic pop
#endif

// - Bayeux/datatools
#include <bayeux/datatools/exception.h>
#include <bayeux/datatools/logger.h>

// This Project
#include <snemo/asb/resource.h>
#include <snemo/asb/version.h>

namespace {

  //! Convert BrInitError code to a string describing the error
  //! \todo add errno to returned string
  std::string BRErrorAsString(const BrInitError & err)
  {
    std::string errMsg;
    switch (err) {
    case BR_INIT_ERROR_NOMEM:
      errMsg = "Unable to open /proc/self/maps";
      break;
    case BR_INIT_ERROR_OPEN_MAPS:
      errMsg =  "Unable to read from /proc/self/maps";
      break;
    case BR_INIT_ERROR_READ_MAPS:
      errMsg = "The file format of /proc/self/maps";
      break;
    case BR_INIT_ERROR_INVALID_MAPS:
      errMsg = "The file format of /proc/self/maps is invalid";
      break;
    case BR_INIT_ERROR_DISABLED:
      errMsg = "Binary relocation disabled";
      break;
    default:
      BOOST_ASSERT_MSG(1,"Invalid BrInitError");
    }
    return errMsg;
  }

  //! Return relative path from application directory to root of resource dir
  std::string relativePathToResourceDir()
  {
    return "@FalaiseASB_LIBDIR_TO_RESOURCEDIR@";
  }

  std::string getLibraryDir()
  {
    char* exePath(0);
    exePath = br_find_exe_dir("");
    std::cerr << "[debug] exePath = " << exePath << std::endl;
    boost::filesystem::path sExePath(exePath);
    free(exePath);
    boost::filesystem::path cExePath = boost::filesystem::canonical(sExePath);
    return cExePath.string();
  }

} // namespace

namespace snemo {

  namespace asb {

    void init_resources()
    {
      BrInitError err;
      int initSuccessful = br_init_lib(&err);
      DT_THROW_IF(initSuccessful != 1,
                  ::snemo::asb::ResourceInitializationException,
                  "resource initialization failed : "
                  << err
                  << " ("
                  << BRErrorAsString(err)
                  << ")");
      return;
    }

    std::string get_resource_dir()
    {
      std::string dir;
      char * flasb_resource_dir_env = 0;
      if (flasb_resource_dir_env = getenv("FALAISE_ASB_RESOURCE_DIR")) {
        std::cerr << "[debug] snemo::asb::get_resource_dir: "
                  << "using resource dir from FALAISE_ASB_RESOURCE_DIR var..." << std::endl;
        dir = std::string(flasb_resource_dir_env);
      } else {
        boost::filesystem::path tmpPath(getLibraryDir());
        tmpPath /= relativePathToResourceDir();
        boost::filesystem::path absPath = boost::filesystem::canonical(tmpPath);
        dir = absPath.string();
      }
      std::cerr << "[debug] snemo::asb::get_resource_dir: dir = " << dir << std::endl;
      return dir;
    }

    std::string get_resource(const std::string & rname_)
    {
      boost::filesystem::path rnamePath(rname_);
      DT_THROW_IF(rnamePath.is_absolute(),
                  std::logic_error,
                  "resource name cannot be absolute");

      boost::filesystem::path expectedResource = get_resource_dir() / rnamePath;
      DT_THROW_IF(!boost::filesystem::exists(expectedResource),
                  std::runtime_error,
                  "Requested resource '"
                  << rname_
                  << "' does not exists at resolved path '"
                  << expectedResource << "'");
      return expectedResource.string();
    }

  } // namespace asb

} // namespace snemo
